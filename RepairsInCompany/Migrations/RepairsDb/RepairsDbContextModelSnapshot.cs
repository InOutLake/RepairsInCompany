// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RepairsInCompany.Model;

#nullable disable

namespace RepairsInCompany.Migrations.RepairsDb
{
    [DbContext(typeof(RepairsDbContext))]
    partial class RepairsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RepairsInCompany.Model.Equipment", b =>
                {
                    b.Property<Guid>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("EquipmentId")
                        .HasName("Unique_Identifier1");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("RepairsInCompany.Model.EquipmentBreakDownDate", b =>
                {
                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime");

                    b.ToTable((string)null);

                    b.ToView("EquipmentBreakDownDates", (string)null);
                });

            modelBuilder.Entity("RepairsInCompany.Model.EquipmentInRepair", b =>
                {
                    b.Property<DateTime?>("EquipmentInRepair1")
                        .HasColumnType("datetime")
                        .HasColumnName("EquipmentInRepair");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.ToTable((string)null);

                    b.ToView("EquipmentInRepair", (string)null);
                });

            modelBuilder.Entity("RepairsInCompany.Model.LastRepairDate", b =>
                {
                    b.Property<DateTime?>("LastRepairDate1")
                        .HasColumnType("datetime")
                        .HasColumnName("LastRepairDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.ToTable((string)null);

                    b.ToView("LastRepairDates", (string)null);
                });

            modelBuilder.Entity("RepairsInCompany.Model.NextRepairDate", b =>
                {
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<DateTime?>("NextRepairDate1")
                        .HasColumnType("datetime")
                        .HasColumnName("NextRepairDate");

                    b.ToTable((string)null);

                    b.ToView("NextRepairDates", (string)null);
                });

            modelBuilder.Entity("RepairsInCompany.Model.Registration", b =>
                {
                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("PeriodInDays")
                        .HasColumnType("int");

                    b.HasKey("StartDateTime", "EquipmentId")
                        .HasName("Unique_Identifier2");

                    b.HasIndex("EquipmentId");

                    b.ToTable("Registration", (string)null);
                });

            modelBuilder.Entity("RepairsInCompany.Model.Repair", b =>
                {
                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("Planned")
                        .HasColumnType("bit");

                    b.HasKey("StartDateTime", "EquipmentId")
                        .HasName("Unique_Identifier3");

                    b.HasIndex("EquipmentId");

                    b.ToTable("Repair", (string)null);
                });

            modelBuilder.Entity("RepairsInCompany.Model.RepairFrequency", b =>
                {
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<int?>("PeriodInDays")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("RepairFrequency", (string)null);
                });

            modelBuilder.Entity("RepairsInCompany.Model.Registration", b =>
                {
                    b.HasOne("RepairsInCompany.Model.Equipment", "Equipment")
                        .WithMany("Registrations")
                        .HasForeignKey("EquipmentId")
                        .IsRequired()
                        .HasConstraintName("Registered");

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("RepairsInCompany.Model.Repair", b =>
                {
                    b.HasOne("RepairsInCompany.Model.Equipment", "Equipment")
                        .WithMany("Repairs")
                        .HasForeignKey("EquipmentId")
                        .IsRequired()
                        .HasConstraintName("Being Repaired");

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("RepairsInCompany.Model.Equipment", b =>
                {
                    b.Navigation("Registrations");

                    b.Navigation("Repairs");
                });
#pragma warning restore 612, 618
        }
    }
}
